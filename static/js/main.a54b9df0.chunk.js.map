{"version":3,"sources":["QuotesApp/QuotesComponent.jsx","QuotesApp/QuotesContainer.js","index.js"],"names":["quotesCollection","randomColor","colors","requestQuotes","a","fetch","response","json","quotes","QuotesApp","componentDidMount","props","randomQuote","newRandomQuote","Math","floor","random","length","thereIsQuotes","this","quotesState","style","backgroundColor","color","React","Component","QuoteBox","className","id","quote","author","border","onClick","href","encodeURIComponent","target","rel","initialQuotesState","QuotesContainer","connect","dispatch","type","QuotesComponent","store","createStore","action","ReactDOM","render","document","getElementById"],"mappings":"yTAEIA,EAAmB,GACnBC,EAAc,GACdC,EAAS,CACX,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGIC,EAAa,uCAAG,8BAAAC,EAAA,sEACCC,MACnB,0IAFkB,cAChBC,EADgB,gBAIDA,EAASC,OAJR,cAIhBC,EAJgB,yBAKbA,GALa,2CAAH,qDAQbC,E,2MACJC,kB,sBAAoB,sBAAAN,EAAA,sEACOD,IADP,OAClBH,EADkB,OAElB,EAAKW,MAAMC,YAAYZ,GAFL,2C,EAKpBa,eAAiB,WACf,EAAKF,MAAMC,YAAYZ,GACvBC,EAAcC,EAAOY,KAAKC,MAAMD,KAAKE,SAAWd,EAAOe,U,wEAIvD,IAAMC,EAAgBC,KAAKR,MAAMS,YAAYF,cAE7C,OADAjB,EAAcC,EAAOY,KAAKC,MAAMD,KAAKE,SAAWd,EAAOe,SACnDC,EAEA,kBAAC,EAAD,CACEG,MAAO,CAAEC,gBAAiBrB,GAC1BW,YAAaO,KAAKR,MAAMS,YAAYR,YACpCC,eAAgBM,KAAKN,eACrBU,MAAOtB,IAGC,S,GAvBMuB,IAAMC,WA2BxBC,EAAW,SAAC,GAAD,IAAGd,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,eAAgBU,EAAhC,EAAgCA,MAAhC,OACf,yBAAKI,UAAU,YAAYC,GAAG,aAC5B,gCAAYD,UAAU,UACpB,uBAAGC,GAAG,OAAOP,MAAO,CAAEE,MAAOA,IAC1BX,EAAYiB,OAEf,uBAAGD,GAAG,SAASP,MAAO,CAAEE,MAAOA,IAC5BX,EAAYkB,SAGjB,yBAAKH,UAAU,WACb,4BACEN,MAAO,CAAEE,MAAOA,EAAOQ,OAAO,aAAD,OAAeR,IAC5CS,QAASnB,EACTe,GAAG,aAHL,aAOA,uBACEK,KACE,8EACAC,mBACE,KAAOtB,EAAYiB,MAAQ,IAAMjB,EAAYkB,QAGjDK,OAAO,SACPC,IAAI,sBACJR,GAAG,cACHP,MAAO,CAAEE,MAAOA,EAAOQ,OAAO,aAAD,OAAeR,KAV9C,YAYW,uBAAGI,UAAU,sBAMflB,IC7ET4B,EAAqB,CACzBnB,eAAe,EACfN,YAAa,IAyBT0B,EAAkBC,aAtBA,SAAAnB,GACtB,MAAO,CACLA,kBAIuB,SAAAoB,GACzB,MAAO,CACL5B,YAAa,SAAAJ,GAAM,OAAIgC,EArBP,SAAAhC,GAElB,MAAO,CACLiC,KALiB,eAMjBZ,MAHUrB,EAAOA,OAAOM,KAAKC,MAAMD,KAAKE,SAAWR,EAAOA,OAAOS,UAoBjCL,CAAYJ,QAcxB+B,CAGtBG,G,OChCIC,EAAQC,aDmBc,WAA+C,IAA9CxB,EAA6C,uDAA/BiB,EAAoBQ,EAAW,uCACxE,MAAoB,iBAAhBA,EAAOJ,KACF,eACFrB,EADL,CAEEF,eAAe,EACfN,YAAaiC,EAAOhB,QAEZT,KCxBd0B,IAASC,OACP,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAACL,EAAD,OAEFU,SAASC,eAAe,W","file":"static/js/main.a54b9df0.chunk.js","sourcesContent":["import React from \"react\";\n\nlet quotesCollection = [];\nlet randomColor = \"\";\nlet colors = [\n  \"#16a085\",\n  \"#27ae60\",\n  \"#2c3e50\",\n  \"#f39c12\",\n  \"#e74c3c\",\n  \"#9b59b6\",\n  \"#FB6964\",\n  \"#342224\",\n  \"#472E32\",\n  \"#BDBB99\",\n  \"#77B1A9\",\n  \"#73A857\"\n];\n\nconst requestQuotes = async () => {\n  let response = await fetch(\n    \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"\n  );\n  let quotes = await response.json();\n  return quotes;\n};\n\nclass QuotesApp extends React.Component {\n  componentDidMount = async () => {\n    quotesCollection = await requestQuotes();\n    this.props.randomQuote(quotesCollection);\n  };\n\n  newRandomQuote = () => {\n    this.props.randomQuote(quotesCollection);\n    randomColor = colors[Math.floor(Math.random() * colors.length)];\n  };\n\n  render() {\n    const thereIsQuotes = this.props.quotesState.thereIsQuotes;\n    randomColor = colors[Math.floor(Math.random() * colors.length)];\n    if (thereIsQuotes) {\n      return (\n        <QuoteBox\n          style={{ backgroundColor: randomColor }}\n          randomQuote={this.props.quotesState.randomQuote}\n          newRandomQuote={this.newRandomQuote}\n          color={randomColor}\n        />\n      );\n    } else return null;\n  }\n}\n\nconst QuoteBox = ({ randomQuote, newRandomQuote, color }) => (\n  <div className=\"container\" id=\"quote-box\">\n    <blockquote className=\"quotes\">\n      <p id=\"text\" style={{ color: color }}>\n        {randomQuote.quote}\n      </p>\n      <p id=\"author\" style={{ color: color }}>\n        {randomQuote.author}\n      </p>\n    </blockquote>\n    <div className=\"buttons\">\n      <button\n        style={{ color: color, border: `2px solid ${color}` }}\n        onClick={newRandomQuote}\n        id=\"new-quote\"\n      >\n        New Quote\n      </button>\n      <a\n        href={\n          `https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=` +\n          encodeURIComponent(\n            '\"\"' + randomQuote.quote + '\"' + randomQuote.author\n          )\n        }\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        id=\"tweet-quote\"\n        style={{ color: color, border: `2px solid ${color}` }}\n      >\n        Share on <i className=\"fa fa-twitter\"></i>\n      </a>\n    </div>\n  </div>\n);\n\nexport default QuotesApp;\n","import { connect } from \"react-redux\";\r\nimport QuotesComponent from \"./QuotesComponent\";\r\n\r\nconst RANDOM_QUOTE = \"RANDOM_QUOTE\";\r\n\r\nconst randomQuote = quotes => {\r\n  let quote = quotes.quotes[Math.floor(Math.random() * quotes.quotes.length)];\r\n  return {\r\n    type: RANDOM_QUOTE,\r\n    quote\r\n  };\r\n};\r\n\r\nconst initialQuotesState = {\r\n  thereIsQuotes: false,\r\n  randomQuote: {}\r\n};\r\n\r\nconst mapStateToProps = quotesState => {\r\n  return {\r\n    quotesState\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    randomQuote: quotes => dispatch(randomQuote(quotes))\r\n  };\r\n};\r\n\r\nconst randomQuotesReducer = (quotesState = initialQuotesState, action) => {\r\n  if (action.type === \"RANDOM_QUOTE\")\r\n    return {\r\n      ...quotesState,\r\n      thereIsQuotes: true,\r\n      randomQuote: action.quote\r\n    };\r\n  else return quotesState;\r\n};\r\n\r\nconst QuotesContainer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(QuotesComponent);\r\n\r\nexport {\r\n  QuotesContainer,\r\n  randomQuotesReducer\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport {\n  QuotesContainer,\n  randomQuotesReducer\n} from './QuotesApp/QuotesContainer';\n\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\n\nconst store = createStore(randomQuotesReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <QuotesContainer />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}